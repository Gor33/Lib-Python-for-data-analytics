#Задание 1
#Напишите функцию, которая классифицирует фильмы из материалов занятия по правилам:

#оценка 2 и ниже — низкий рейтинг;
#оценка 4 и ниже — средний рейтинг;
#оценка 4.5 и 5 — высокий рейтинг.
#Результат классификации запишите в столбец class.

import pandas as pd
raiting=pd.read_csv('ratings.csv')
raiting.head()

def class_movies(row):
    if row['rating']<=2.0:
        return 'низкий рейтинг'
    elif 2.0<row['rating']<=4.0:
        return 'средний рейтинг'
    else:
        return 'высокий рейтинг'

raiting['class'] = raiting.apply(class_movies, axis=1)
raiting.head()


#Задание 2
#Используйте файл keywords.csv.
#Нужно написать гео-классификатор, который каждой строке сможет выставить географическую принадлежность определённому региону. 
#Т. е. если поисковый запрос содержит название города региона, то в столбце ‘region’ пишется название этого региона. Если поисковый запрос не содержит названия города, то ставим ‘undefined’.

#Правила распределения по регионам Центр, Северо-Запад и Дальний Восток:
#geo_data = {
#'Центр': ['москва', 'тула', 'ярославль'],
#'Северо-Запад': ['петербург', 'псков', 'мурманск'],
#'Дальний Восток': ['владивосток', 'сахалин', 'хабаровск']}

#Результат классификации запишите в отдельный столбец region.
import pandas as pd
geo_data = {
'Центр':['москва', 'тула', 'ярославль'],
'Северо-Запад':['петербург', 'псков', 'мурманск'],
'Дальний Восток':['владивосток', 'сахалин', 'хабаровск'] 
}
towns=[]
for values in geo_data.values():
    for i in values:
        towns.append(i)
towns
['москва',  'тула',  'ярославль',  'петербург',  'псков',  'мурманск',  'владивосток',  'сахалин',  'хабаровск']

row='вконтакте моя страница москва'
data=row.split(' ')
def check(t):
    for i in t:
        if i in towns:
            for items in geo_data.items():
                if i in items[1]:
                    print(items[0])
check(data)

df=pd.read_csv('keywords.csv')
df.head()

def region_in_keyword(row):
    data=row['keyword'].split(' ')
    i=0
    for word in data:
        if word in towns:
            for items in geo_data.items():
                if word in items[1]:
                    i+=1
                    return items[0]
    if i==0:
        return 'undefined'       
df['region'] = df.apply(region_in_keyword, axis=1)
df.head()

df[(df['region']!='undefined')]

#Задание 3 (бонусное)

#Есть мнение, что раньше снимали настоящее кино, не то что сейчас. Ваша задача — проверить это утверждение, используя файлы с рейтингами фильмов из прошлого домашнего занятия: 
#файл movies.csv и ratings.csv из базы. Нужно проверить, верно ли, что с ростом года выпуска фильма его средний рейтинг становится ниже.
#Вы не будете затрагивать субьективные факторы выставления этих рейтингов, а пройдётесь по алгоритму:

#В переменную years запишите список из всех годов с 1950 по 2010 года.
#Напишите функцию production_year, которая каждой строке из названия фильма выставляет год выпуска. Не все названия фильмов содержат год выпуска в одинаковом формате, поэтому используйте алгоритм:

#для каждой строки пройдите по всем годам списка years;
#если номер года присутствует в названии фильма, то функция возвращает этот год, как год выпуска;
#если ни один из номеров года списка years не встретился в названии фильма, то возвращается 1900 год.
#Запишите год выпуска фильма по алгоритму пункта 2 в новый столбец ‘year’.

#Посчитайте средний рейтинг всех фильмов для каждого значения столбца ‘year’ и отсортируйте результат по убыванию рейтинга.

movies = pd.read_csv('movies.csv')
ratings = pd.read_csv('ratings.csv')
Total = ratings.merge(movies, on=["movieId"], how='inner')
Total.head()

years = []
for year in range(1950,2010):
    years.append(year)
num = len(years)
j = []
for i in range(1,num+1):
    j.append(i)
print (j)

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]

def production_year(title):
    for year in years:
        if str(year) in title:
            return year

    return 1900
Total['year'] = Total['title'].apply(production_year)
Total.head()

pvt = Total.pivot_table(index=['year'], values = 'rating', aggfunc='mean')
pvt_sorted = pvt.sort_values(by = ['rating'], ascending = False)
pvt_sorted.head()




